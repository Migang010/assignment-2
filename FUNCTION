#Program to Display Prime Numbers Between Two Intervals Using Functions
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def prime_in_interval(start, end):
    print(f"Prime numbers between {start} and {end} are:")
    for num in range(start, end + 1):
        if is_prime(num):
            print(num, end=" ")
    print()

start = int(input("Enter start of interval: "))
end = int(input("Enter end of interval: "))
prime_in_interval(start, end)


#Program to check if an integer can be expressed as the sum of two prime numbers
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def find_prime_sums(n):
    print(f"Possible sums of two primes for {n}:")
    found = False
    for i in range(2, n):
        if is_prime(i) and is_prime(n - i):
            print(f"{n} = {i} + {n - i}")
            found = True
    if not found:
        print("No such prime pairs exist")

n = int(input("Enter a positive integer: "))
find_prime_sums(n)


#Program to Convert Binary Number to Decimal manually
def binary_to_decimal(binary):
    decimal = 0
    power = 0
    while binary > 0:
        digit = binary % 10
        decimal += digit * (2 ** power)
        binary //= 10
        power += 1
    return decimal

binary = int(input("Enter a binary number: "))
print(f"Decimal equivalent: {binary_to_decimal(binary)}")



#Program to Convert Decimal to Binary number manually
def decimal_to_binary(decimal):
    if decimal == 0:
        return "0"
    binary = ""
    n = decimal
    while n > 0:
        binary = str(n % 2) + binary
        n //= 2
    return binary

decimal = int(input("Enter a decimal number: "))
print(f"Binary equivalent: {decimal_to_binary(decimal)}")
